//BRUTE
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int N=nums.size();
        set<vector<int>>st;

        for(int i=0; i<N; i++){
            for(int j=i+1; j<N; j++){
                for(int k=j+1; k<N; k++){
                    for(int l=k+1; l<N; l++){
                        long long sum=nums[i]+nums[j];
                        sum+=nums[k];
                        sum+=nums[l];
                        if(sum==target){
                            vector<int>temp={nums[i],nums[j],nums[k],nums[l]};
                            sort(temp.begin(),temp.end());
                            st.insert(temp);
                        }
                    }
                }
            }
        }


        vector<vector<int>>ans(st.begin(),st.end());
        return ans;
    }
};

//BETTER
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int N=nums.size();
        set<vector<int>>st;

        for(int i=0; i<N; i++){
            for(int j=i+1; j<N; j++){
                set<int>a;
                for(int k=j+1; k<N; k++){
                    int sum=nums[i]+nums[j];
                    sum+=nums[k];
                    int third=target-sum;
                    if(a.find(third)!=a.end()){
                        vector<int>temp={nums[i],nums[j],nums[k],third};
                        sort(temp.begin(),temp.end());
                        st.insert(temp);
                    }
                    a.insert(nums[k]);
                }
            }
        }
        vector<vector<int>>ans(st.begin(),st.end());
        return ans;
    }
};

//OPTIMAL
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int N=nums.size();
        sort(nums.begin(),nums.end());
        vector<vector<int>>ans;

        for(int i=0; i<N; i++){
            if(i>0 && nums[i]==nums[i-1]){
                continue;
            }
            for(int j=i+1; j<N; j++){
                if(j>i+1 && nums[j]==nums[j-1]){
                    continue;
                }
                int k=j+1;
                int l=N-1;
                while(k<l){
                    long long sum=nums[i]+nums[j];
                    sum+=nums[k];
                    sum+=nums[l];
                    if(sum>target){
                        l--;
                    }
                    else if(sum<target){
                        k++;
                    }
                    else{
                        vector<int>temp={nums[i],nums[j],nums[k],nums[l]};
                        ans.push_back(temp);
                        k++;
                        l--;
                        while(k<l && nums[k]==nums[k-1]){
                            k++;
                        }
                        while(k<l && nums[l]==nums[l+1]){
                            l--;
                        }
                    }
                }
            }
        }
        return ans;
    }
};
