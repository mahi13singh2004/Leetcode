//BRUTE
class Solution {
public:
    void sortColors(vector<int>& nums) {
        sort(nums.begin(),nums.end());
    }
};

//BETTER
class Solution {
public:
    void sortColors(vector<int>& nums) {
        vector<int>one;
        vector<int>zero;
        vector<int>two;

        int N=nums.size();

        for(int i=0; i<N; i++){
            if(nums[i]==0){
                zero.push_back(0);
            }
            else if(nums[i]==1){
                one.push_back(1);
            }
            else{
                two.push_back(2);
            }
        }

        int N1=zero.size();
        int N2=one.size();
        int N3=two.size();

        for(int i=0; i<N1; i++){
            nums[i]=0;
        }

        for(int i=N1; i<N1+N2; i++){
            nums[i]=1;
        }

        for(int i=N1+N2; i<N; i++){
            nums[i]=2;
        }
    }
};

//OPTIMAL
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int N=nums.size();
        int left=0;
        int right=N-1;
        int mid=0;
        while(mid<=right){
            if(nums[mid]==0){
                swap(nums[mid],nums[left]);
                left++;
                mid++;
            }
            else if(nums[mid]==1){
                mid++;
            }
            else{
                swap(nums[mid],nums[right]);
                right--;
            }
        }
    }
};
