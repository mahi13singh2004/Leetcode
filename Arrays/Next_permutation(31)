//BRUTE 
Generate all permutation and proceed. Very timetaking!!

//BETTER
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        next_permutation(nums.begin(),nums.end());
    }
};

//OPTIMAL
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int idx=-1;
        int N=nums.size();
        for(int i=N-2; i>=0; i--){
            if(nums[i]<nums[i+1]){
                idx=i;
                break;
            }
        }

        if(idx==-1){
            reverse(nums.begin(),nums.end());
            return;
        }

        for(int i=N-1 ; i>=idx; i--){
            if(nums[i]>nums[idx]){
                swap(nums[i],nums[idx]);
                break;
            }
        }

        reverse(nums.begin()+idx+1, nums.end());
    }
};
