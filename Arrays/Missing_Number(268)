//BRUTE
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int missing=1;
        int ans=-1;
        int N=nums.size();
        for(int i=0; i<N; i++){
            missing=0;
            for(int j=0; j<N; j++){
                if(i==nums[j]){
                    missing=1;
                    break;
                }
            }
            if(missing==0){
                ans=i;
                break;
            }
        }
        if(ans==-1){
            return N;
        }
        else{
            return ans;
        }
    }
};

//BETTER
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int ans=-1;
        int N=nums.size();
        vector<int>hash(N+1,0);
        for(int i=0; i<N; i++){
            hash[nums[i]]++;
        }

        for(int i=0; i<N; i++){
            if(hash[i]==0){
                ans=i;
                break;
            }
        }

        if(ans==-1){
            return N;
        }
        return ans;
    }
};

//OPTIMAL 1
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int N=nums.size();
        int desired=(N*(N+1))/2;
        int sum=0;
        for(int i=0; i<N; i++){
            sum+=nums[i];
        }

        return desired-sum;
    }
};

//OPTIMAL 2
class Solution {
public:
    int missingNumber(vector<int>& nums) {
       int N=nums.size();
       int XOR1=0;
       int XOR2=0;

       for(int i=0; i<N; i++){
            XOR1=XOR1^nums[i];
       }

       for(int i=0; i<=N; i++){
            XOR2=XOR2^i;
       }

       return XOR2^XOR1;
    }
};
