//BRUTE
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        set<vector<int>>st;
        int N=nums.size();
        for(int i=0; i<N; i++){
            for(int j=i+1; j<N; j++){
                for(int k=j+1; k<N; k++){
                    if(nums[i]+nums[j]+nums[k]==0){
                        vector<int>temp={nums[i],nums[j],nums[k]};
                        sort(temp.begin(),temp.end());
                        st.insert(temp);
                    }
                }
            }
        }

        vector<vector<int>>ans(st.begin(),st.end());
        return ans;
    }
};

//BETTER
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        set<vector<int>>st;
        int N=nums.size();
        for(int i=0; i<N; i++){
            set<int>a;
            for(int j=i+1; j<N; j++){
                int third=-(nums[i]+nums[j]);
                if(a.find(third)!=a.end()){
                    vector<int>temp={nums[i],nums[j],third};
                    sort(temp.begin(),temp.end());
                    st.insert(temp);
                }
                a.insert(nums[j]);
            }
        }

        vector<vector<int>>ans(st.begin(),st.end());
        return ans;
    }
};

//OPTIMAL
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int N=nums.size();
        vector<vector<int>>ans;

        for(int i=0; i<N; i++){
            if(i>0 && nums[i]==nums[i-1]){
                continue;
            }
            int j=i+1;
            int k=N-1;
            while(j<k){
                long long sum=nums[i]+nums[j];
                sum+=nums[k];
                if(sum>0){
                    k--;
                }
                else if(sum<0){
                    j++;
                }
                else{
                    vector<int>temp={nums[i],nums[j],nums[k]};
                    ans.push_back(temp);
                    j++;
                    k--;
                    while(j<k && nums[j]==nums[j-1]){
                        j++;
                    }
                    while(j<k && nums[k]==nums[k+1]){
                        k--;
                    }
                }
            }
        }
        return ans;
    }
};
